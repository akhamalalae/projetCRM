
{% extends 'base.html.twig' %}
{% block title %}Configuration Espace!{% endblock %}

{% block content %}

    <div class="container">
        <br>
        <br>
         {{ form_start(form) }}
        <h2>Configuration des éspaces
        </h2>
        <hr>
        <div class="col-12">
            {{ include('configurationEspace/sidebar.html.twig') }}
        </div>
        <div class="row">
            <div class="col-4">
                 <br>
                 {{ form_row(form.libelle) }}
                 <br>
                 {{ form_row(form.color) }}
                 <br>
                {{ form_row(form.save) }}
                {{ form_end(form) }}
                <br><br><br>
            </div>
            <div class="col-8">
                <br>
                <div class="d-flex flex-column flex-shrink-0 p-3 bg-light">
                    <table id="table_id" class="display">
                        <thead>
                            <tr>
                                <th>Nom</th>
                                <th>Point de vente</th>
                                <th>Couleur</th>
                                 <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        {% for espace in configurationEspacePointVente %}
                            <tr>
                                <td>{{ espace.libelle }}</td>
                                <td>{{ espace.pointVente.libelle }}</td>
                                <td><input type="color" value="{{ espace.color }}"></td>
                                <td>
                                    <a class="btn btn-danger" href="" aria-label="delet">
                                        <i class="fa fa-trash" aria-hidden="true"></i>
                                    </a>
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="10"></td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
                <br><br><br>
            </div>
        </div>
        <hr>
        {% set indice = 0 %}
            {% for espace in configurationEspacePointVente %}
                {% set indice = indice + 1 %}
                <div id="drag-{{ espace.id }}" class="draggable" style="
                    width: 20%;
                    min-height: 6.5em;
                    margin: 1rem 0 0 1rem;
                    background-color: {{ espace.color }};
                    color: white;
                    border-radius: 0.75em;
                    padding: 4%;
                    touch-action: none;
                    user-select: none;
                    transform: translate({{ espace.x }}px, {{ espace.y }}px);
                    ">
                        <a href="{{ path('configuration_objet', {'id': espace.id}) }}" aria-label="add" title="Configuration des objets">
                            <i class="fa fa-cog" aria-hidden="true"></i>
                        </a>
                         {{ espace.libelle }}
                </div>
            {% endfor %}
        <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
        <button type="button" id="idconfigurationEspacePointVente" onclick="myFunction()" class="btn btn-success">Valider</button>
        <hr>

    </div>



{% endblock %}
{% block javascript %}
<script>
    $(document).ready( function () {
        //$('#table_id').DataTable();  style="transform: translate(525px, -47px);" data-x="100" data-y="100"
        $('#table_id').DataTable( {
            responsive: true,
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.11.3/i18n/fr_fr.json"
            }
        } );

    });

    var objCoordonnees = {};
     // target elements with the "draggable" class
    interact('.draggable')
    .draggable({
        // enable inertial throwing
        inertia: true,
        // keep the element within the area of it's parent
        modifiers: [
        interact.modifiers.restrictRect({
            restriction: 'parent',
            endOnly: true
        })
        ],
        // enable autoScroll
        autoScroll: true,

        listeners: {
        // call this function on every dragmove event
        move: dragMoveListener,

        // call this function on every dragend event
        end (event) {
            /*
            var textEl = event.target.querySelector('p')

            textEl && (textEl.textContent =
            'moved a distance of (' + event.pageX+ ' -- ' + event.pageY + ')' +
            (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +
                        Math.pow(event.pageY - event.y0, 2) | 0))
                .toFixed(2) + 'px')
            */
        }
        }
    })

    function dragMoveListener (event) {
        var target = event.target

        // keep the dragged position in the data-x/data-y attributes
        var x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
        var y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

        // translate the element
        target.style.transform = 'translate(' + x + 'px, ' + y + 'px)'

        var libX = target.id+"-x";
        var libY = target.id+"-y";

        objCoordonnees[libX] = x;
        objCoordonnees[libY] = y;
        // update the posiion attributes
        target.setAttribute('data-x', x)
        target.setAttribute('data-y', y)

        var xx = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx
        var yy = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy

        //const myEl = document.getElementById('drag-1');
        //console.log(window.getComputedStyle(myEl).transform);
        sessionStorage.setItem("SessionName",target)
    }

    // this function is used later in the resizing and gesture demos
    window.dragMoveListener = dragMoveListener

    function myFunction() {
        $.ajax({
            //L'URL de la requête
            url: "{{ path('UpdateConfigurationEspace') }}",
            //La méthode d'envoi (type de requête)
            method: "GET",
            data: {'objCoordonnees':objCoordonnees},
            beforeSend: function () {
                //Code à jouer avant l'appel ajax en lui même
                var htmlSpinner = '<center><i class="fa fa-spinner fa-pulse" style="font-size:200px;color:Gray;"></i></center>'; 
                $('.modal-body').html(htmlSpinner);
            }
        })
        .done(function(response){
            alert("Les modifications ont été apportées.");
        })
        .fail(function(error){
            alert("La requête s'est terminée en échec.");
        })
    }

</script>
{% endblock %}